/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace DataTypes {
  export type TokenStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    associatedId: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    tokenType: PromiseOrValue<BigNumberish>;
    handle: PromiseOrValue<string>;
    imageURI: PromiseOrValue<string>;
    contentURI: PromiseOrValue<string>;
  };

  export type TokenStructOutput = [
    BigNumber,
    BigNumber,
    string,
    number,
    string,
    string,
    string
  ] & {
    tokenId: BigNumber;
    associatedId: BigNumber;
    owner: string;
    tokenType: number;
    handle: string;
    imageURI: string;
    contentURI: string;
  };

  export type CreatePublishDataStruct = {
    profileId: PromiseOrValue<BigNumberish>;
    imageURI: PromiseOrValue<string>;
    contentURI: PromiseOrValue<string>;
  };

  export type CreatePublishDataStructOutput = [BigNumber, string, string] & {
    profileId: BigNumber;
    imageURI: string;
    contentURI: string;
  };

  export type UpdatePublishDataStruct = {
    imageURI: PromiseOrValue<string>;
    contentURI: PromiseOrValue<string>;
  };

  export type UpdatePublishDataStructOutput = [string, string] & {
    imageURI: string;
    contentURI: string;
  };
}

export interface ContentBasePublishInterface extends utils.Interface {
  functions: {
    "createPublish(string,(uint256,string,string))": FunctionFragment;
    "updatePublish(uint256,string,(string,string))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createPublish" | "updatePublish"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createPublish",
    values: [PromiseOrValue<string>, DataTypes.CreatePublishDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePublish",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      DataTypes.UpdatePublishDataStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createPublish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePublish",
    data: BytesLike
  ): Result;

  events: {
    "PublishCreated(tuple,address)": EventFragment;
    "PublishUpdated(tuple,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PublishCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublishUpdated"): EventFragment;
}

export interface PublishCreatedEventObject {
  token: DataTypes.TokenStructOutput;
  owner: string;
}
export type PublishCreatedEvent = TypedEvent<
  [DataTypes.TokenStructOutput, string],
  PublishCreatedEventObject
>;

export type PublishCreatedEventFilter = TypedEventFilter<PublishCreatedEvent>;

export interface PublishUpdatedEventObject {
  token: DataTypes.TokenStructOutput;
  owner: string;
}
export type PublishUpdatedEvent = TypedEvent<
  [DataTypes.TokenStructOutput, string],
  PublishUpdatedEventObject
>;

export type PublishUpdatedEventFilter = TypedEventFilter<PublishUpdatedEvent>;

export interface ContentBasePublish extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ContentBasePublishInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPublish(
      uri: PromiseOrValue<string>,
      createPublishData: DataTypes.CreatePublishDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePublish(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      updatePublishData: DataTypes.UpdatePublishDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createPublish(
    uri: PromiseOrValue<string>,
    createPublishData: DataTypes.CreatePublishDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePublish(
    tokenId: PromiseOrValue<BigNumberish>,
    uri: PromiseOrValue<string>,
    updatePublishData: DataTypes.UpdatePublishDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createPublish(
      uri: PromiseOrValue<string>,
      createPublishData: DataTypes.CreatePublishDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePublish(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      updatePublishData: DataTypes.UpdatePublishDataStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "PublishCreated(tuple,address)"(
      token?: null,
      owner?: null
    ): PublishCreatedEventFilter;
    PublishCreated(token?: null, owner?: null): PublishCreatedEventFilter;

    "PublishUpdated(tuple,address)"(
      token?: null,
      owner?: null
    ): PublishUpdatedEventFilter;
    PublishUpdated(token?: null, owner?: null): PublishUpdatedEventFilter;
  };

  estimateGas: {
    createPublish(
      uri: PromiseOrValue<string>,
      createPublishData: DataTypes.CreatePublishDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePublish(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      updatePublishData: DataTypes.UpdatePublishDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPublish(
      uri: PromiseOrValue<string>,
      createPublishData: DataTypes.CreatePublishDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePublish(
      tokenId: PromiseOrValue<BigNumberish>,
      uri: PromiseOrValue<string>,
      updatePublishData: DataTypes.UpdatePublishDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
