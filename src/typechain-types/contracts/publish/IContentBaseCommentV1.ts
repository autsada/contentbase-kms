/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace DataTypes {
  export type CreateCommentDataStruct = {
    parentId: PromiseOrValue<BigNumberish>;
    creatorId: PromiseOrValue<BigNumberish>;
    text: PromiseOrValue<string>;
  };

  export type CreateCommentDataStructOutput = [BigNumber, BigNumber, string] & {
    parentId: BigNumber;
    creatorId: BigNumber;
    text: string;
  };

  export type CommentStruct = {
    owner: PromiseOrValue<string>;
    creatorId: PromiseOrValue<BigNumberish>;
    parentId: PromiseOrValue<BigNumberish>;
    commentType: PromiseOrValue<BigNumberish>;
    text: PromiseOrValue<string>;
  };

  export type CommentStructOutput = [
    string,
    BigNumber,
    BigNumber,
    number,
    string
  ] & {
    owner: string;
    creatorId: BigNumber;
    parentId: BigNumber;
    commentType: number;
    text: string;
  };

  export type UpdateCommentDataStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    creatorId: PromiseOrValue<BigNumberish>;
    text: PromiseOrValue<string>;
  };

  export type UpdateCommentDataStructOutput = [BigNumber, BigNumber, string] & {
    tokenId: BigNumber;
    creatorId: BigNumber;
    text: string;
  };
}

export interface IContentBaseCommentV1Interface extends utils.Interface {
  functions: {
    "commentOnComment((uint256,uint256,string))": FunctionFragment;
    "commentOnPublish((uint256,uint256,string))": FunctionFragment;
    "deleteComment(uint256,uint256)": FunctionFragment;
    "disLikeComment(uint256,uint256)": FunctionFragment;
    "getCommentById(uint256)": FunctionFragment;
    "getProfileContract()": FunctionFragment;
    "getPublishContract()": FunctionFragment;
    "likeComment(uint256,uint256)": FunctionFragment;
    "updateComment((uint256,uint256,string))": FunctionFragment;
    "updateProfileContract(address)": FunctionFragment;
    "updatePublishContract(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "commentOnComment"
      | "commentOnPublish"
      | "deleteComment"
      | "disLikeComment"
      | "getCommentById"
      | "getProfileContract"
      | "getPublishContract"
      | "likeComment"
      | "updateComment"
      | "updateProfileContract"
      | "updatePublishContract"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "commentOnComment",
    values: [DataTypes.CreateCommentDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "commentOnPublish",
    values: [DataTypes.CreateCommentDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteComment",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disLikeComment",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommentById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublishContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "likeComment",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateComment",
    values: [DataTypes.UpdateCommentDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfileContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePublishContract",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "commentOnComment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commentOnPublish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteComment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disLikeComment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommentById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublishContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "likeComment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateComment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProfileContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePublishContract",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IContentBaseCommentV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IContentBaseCommentV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    commentOnComment(
      createCommentData: DataTypes.CreateCommentDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commentOnPublish(
      createCommentData: DataTypes.CreateCommentDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteComment(
      tokenId: PromiseOrValue<BigNumberish>,
      creatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disLikeComment(
      commentId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCommentById(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.CommentStructOutput]>;

    getProfileContract(overrides?: CallOverrides): Promise<[string]>;

    getPublishContract(overrides?: CallOverrides): Promise<[string]>;

    likeComment(
      commentId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateComment(
      updateCommentData: DataTypes.UpdateCommentDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateProfileContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePublishContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  commentOnComment(
    createCommentData: DataTypes.CreateCommentDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commentOnPublish(
    createCommentData: DataTypes.CreateCommentDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteComment(
    tokenId: PromiseOrValue<BigNumberish>,
    creatorId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disLikeComment(
    commentId: PromiseOrValue<BigNumberish>,
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCommentById(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.CommentStructOutput>;

  getProfileContract(overrides?: CallOverrides): Promise<string>;

  getPublishContract(overrides?: CallOverrides): Promise<string>;

  likeComment(
    commentId: PromiseOrValue<BigNumberish>,
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateComment(
    updateCommentData: DataTypes.UpdateCommentDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateProfileContract(
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePublishContract(
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    commentOnComment(
      createCommentData: DataTypes.CreateCommentDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    commentOnPublish(
      createCommentData: DataTypes.CreateCommentDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteComment(
      tokenId: PromiseOrValue<BigNumberish>,
      creatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    disLikeComment(
      commentId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCommentById(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.CommentStructOutput>;

    getProfileContract(overrides?: CallOverrides): Promise<string>;

    getPublishContract(overrides?: CallOverrides): Promise<string>;

    likeComment(
      commentId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateComment(
      updateCommentData: DataTypes.UpdateCommentDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProfileContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePublishContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    commentOnComment(
      createCommentData: DataTypes.CreateCommentDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commentOnPublish(
      createCommentData: DataTypes.CreateCommentDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteComment(
      tokenId: PromiseOrValue<BigNumberish>,
      creatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disLikeComment(
      commentId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCommentById(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProfileContract(overrides?: CallOverrides): Promise<BigNumber>;

    getPublishContract(overrides?: CallOverrides): Promise<BigNumber>;

    likeComment(
      commentId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateComment(
      updateCommentData: DataTypes.UpdateCommentDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateProfileContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePublishContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    commentOnComment(
      createCommentData: DataTypes.CreateCommentDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commentOnPublish(
      createCommentData: DataTypes.CreateCommentDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteComment(
      tokenId: PromiseOrValue<BigNumberish>,
      creatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disLikeComment(
      commentId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCommentById(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProfileContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublishContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    likeComment(
      commentId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateComment(
      updateCommentData: DataTypes.UpdateCommentDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateProfileContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePublishContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
