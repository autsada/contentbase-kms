/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace DataTypes {
  export type CreatePublishDataStruct = {
    creatorId: PromiseOrValue<BigNumberish>;
    imageURI: PromiseOrValue<string>;
    contentURI: PromiseOrValue<string>;
    metadataURI: PromiseOrValue<string>;
    title: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    primaryCategory: PromiseOrValue<BigNumberish>;
    secondaryCategory: PromiseOrValue<BigNumberish>;
    tertiaryCategory: PromiseOrValue<BigNumberish>;
    kind: PromiseOrValue<BigNumberish>;
  };

  export type CreatePublishDataStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    number,
    number,
    number,
    number
  ] & {
    creatorId: BigNumber;
    imageURI: string;
    contentURI: string;
    metadataURI: string;
    title: string;
    description: string;
    primaryCategory: number;
    secondaryCategory: number;
    tertiaryCategory: number;
    kind: number;
  };

  export type PublishStruct = {
    owner: PromiseOrValue<string>;
    creatorId: PromiseOrValue<BigNumberish>;
    imageURI: PromiseOrValue<string>;
    contentURI: PromiseOrValue<string>;
    metadataURI: PromiseOrValue<string>;
  };

  export type PublishStructOutput = [
    string,
    BigNumber,
    string,
    string,
    string
  ] & {
    owner: string;
    creatorId: BigNumber;
    imageURI: string;
    contentURI: string;
    metadataURI: string;
  };

  export type UpdatePublishDataStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    creatorId: PromiseOrValue<BigNumberish>;
    imageURI: PromiseOrValue<string>;
    contentURI: PromiseOrValue<string>;
    metadataURI: PromiseOrValue<string>;
    title: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    primaryCategory: PromiseOrValue<BigNumberish>;
    secondaryCategory: PromiseOrValue<BigNumberish>;
    tertiaryCategory: PromiseOrValue<BigNumberish>;
  };

  export type UpdatePublishDataStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    string,
    string,
    number,
    number,
    number
  ] & {
    tokenId: BigNumber;
    creatorId: BigNumber;
    imageURI: string;
    contentURI: string;
    metadataURI: string;
    title: string;
    description: string;
    primaryCategory: number;
    secondaryCategory: number;
    tertiaryCategory: number;
  };
}

export interface IContentBasePublishV1Interface extends utils.Interface {
  functions: {
    "createPublish((uint256,string,string,string,string,string,uint8,uint8,uint8,uint8))": FunctionFragment;
    "deletePublish(uint256,uint256)": FunctionFragment;
    "getProfileContract()": FunctionFragment;
    "getPublishById(uint256)": FunctionFragment;
    "publishExist(uint256)": FunctionFragment;
    "publishOwner(uint256)": FunctionFragment;
    "updateProfileContract(address)": FunctionFragment;
    "updatePublish((uint256,uint256,string,string,string,string,string,uint8,uint8,uint8))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createPublish"
      | "deletePublish"
      | "getProfileContract"
      | "getPublishById"
      | "publishExist"
      | "publishOwner"
      | "updateProfileContract"
      | "updatePublish"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createPublish",
    values: [DataTypes.CreatePublishDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deletePublish",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublishById",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "publishExist",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "publishOwner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfileContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePublish",
    values: [DataTypes.UpdatePublishDataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "createPublish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePublish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublishById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProfileContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePublish",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IContentBasePublishV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IContentBasePublishV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPublish(
      createPublishData: DataTypes.CreatePublishDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deletePublish(
      tokenId: PromiseOrValue<BigNumberish>,
      creatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getProfileContract(overrides?: CallOverrides): Promise<[string]>;

    getPublishById(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.PublishStructOutput]>;

    publishExist(
      publishId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    publishOwner(
      publishId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    updateProfileContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePublish(
      updatePublishData: DataTypes.UpdatePublishDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createPublish(
    createPublishData: DataTypes.CreatePublishDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deletePublish(
    tokenId: PromiseOrValue<BigNumberish>,
    creatorId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getProfileContract(overrides?: CallOverrides): Promise<string>;

  getPublishById(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.PublishStructOutput>;

  publishExist(
    publishId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  publishOwner(
    publishId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  updateProfileContract(
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePublish(
    updatePublishData: DataTypes.UpdatePublishDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createPublish(
      createPublishData: DataTypes.CreatePublishDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    deletePublish(
      tokenId: PromiseOrValue<BigNumberish>,
      creatorId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getProfileContract(overrides?: CallOverrides): Promise<string>;

    getPublishById(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.PublishStructOutput>;

    publishExist(
      publishId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    publishOwner(
      publishId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    updateProfileContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePublish(
      updatePublishData: DataTypes.UpdatePublishDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    createPublish(
      createPublishData: DataTypes.CreatePublishDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deletePublish(
      tokenId: PromiseOrValue<BigNumberish>,
      creatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getProfileContract(overrides?: CallOverrides): Promise<BigNumber>;

    getPublishById(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publishExist(
      publishId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publishOwner(
      publishId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateProfileContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePublish(
      updatePublishData: DataTypes.UpdatePublishDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPublish(
      createPublishData: DataTypes.CreatePublishDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deletePublish(
      tokenId: PromiseOrValue<BigNumberish>,
      creatorId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getProfileContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublishById(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publishExist(
      publishId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publishOwner(
      publishId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateProfileContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePublish(
      updatePublishData: DataTypes.UpdatePublishDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
