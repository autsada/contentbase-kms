/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IContentBaseLikeV1Interface extends utils.Interface {
  functions: {
    "checkDisLikedPublish(uint256,uint256)": FunctionFragment;
    "checkLikedPublish(uint256,uint256)": FunctionFragment;
    "disLikePublish(uint256,uint256)": FunctionFragment;
    "getProfileContract()": FunctionFragment;
    "getPublishContract()": FunctionFragment;
    "likePublish(uint256,uint256)": FunctionFragment;
    "updateLikeFee(uint256)": FunctionFragment;
    "updatePlatformFee(uint256)": FunctionFragment;
    "updatePlatformOwner(address)": FunctionFragment;
    "updateProfileContract(address)": FunctionFragment;
    "updatePublishContract(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkDisLikedPublish"
      | "checkLikedPublish"
      | "disLikePublish"
      | "getProfileContract"
      | "getPublishContract"
      | "likePublish"
      | "updateLikeFee"
      | "updatePlatformFee"
      | "updatePlatformOwner"
      | "updateProfileContract"
      | "updatePublishContract"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkDisLikedPublish",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkLikedPublish",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "disLikePublish",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublishContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "likePublish",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLikeFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePlatformOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfileContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePublishContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "checkDisLikedPublish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLikedPublish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disLikePublish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublishContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "likePublish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLikeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePlatformOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProfileContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePublishContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface IContentBaseLikeV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IContentBaseLikeV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkDisLikedPublish(
      profileId: PromiseOrValue<BigNumberish>,
      publishId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkLikedPublish(
      profileId: PromiseOrValue<BigNumberish>,
      publishId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    disLikePublish(
      publishId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getProfileContract(overrides?: CallOverrides): Promise<[string]>;

    getPublishContract(overrides?: CallOverrides): Promise<[string]>;

    likePublish(
      publishId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateLikeFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePlatformFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePlatformOwner(
      ownerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateProfileContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePublishContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  checkDisLikedPublish(
    profileId: PromiseOrValue<BigNumberish>,
    publishId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkLikedPublish(
    profileId: PromiseOrValue<BigNumberish>,
    publishId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  disLikePublish(
    publishId: PromiseOrValue<BigNumberish>,
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getProfileContract(overrides?: CallOverrides): Promise<string>;

  getPublishContract(overrides?: CallOverrides): Promise<string>;

  likePublish(
    publishId: PromiseOrValue<BigNumberish>,
    profileId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateLikeFee(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePlatformFee(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePlatformOwner(
    ownerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateProfileContract(
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePublishContract(
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkDisLikedPublish(
      profileId: PromiseOrValue<BigNumberish>,
      publishId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkLikedPublish(
      profileId: PromiseOrValue<BigNumberish>,
      publishId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    disLikePublish(
      publishId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getProfileContract(overrides?: CallOverrides): Promise<string>;

    getPublishContract(overrides?: CallOverrides): Promise<string>;

    likePublish(
      publishId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLikeFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlatformFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePlatformOwner(
      ownerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProfileContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePublishContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    checkDisLikedPublish(
      profileId: PromiseOrValue<BigNumberish>,
      publishId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkLikedPublish(
      profileId: PromiseOrValue<BigNumberish>,
      publishId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disLikePublish(
      publishId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getProfileContract(overrides?: CallOverrides): Promise<BigNumber>;

    getPublishContract(overrides?: CallOverrides): Promise<BigNumber>;

    likePublish(
      publishId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateLikeFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePlatformFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePlatformOwner(
      ownerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateProfileContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePublishContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkDisLikedPublish(
      profileId: PromiseOrValue<BigNumberish>,
      publishId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkLikedPublish(
      profileId: PromiseOrValue<BigNumberish>,
      publishId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disLikePublish(
      publishId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getProfileContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPublishContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    likePublish(
      publishId: PromiseOrValue<BigNumberish>,
      profileId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateLikeFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePlatformFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePlatformOwner(
      ownerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateProfileContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePublishContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
