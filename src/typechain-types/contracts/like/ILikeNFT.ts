/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace DataTypes {
  export type CreateLikeDataStruct = {
    profileId: PromiseOrValue<BigNumberish>;
    publishId: PromiseOrValue<BigNumberish>;
  };

  export type CreateLikeDataStructOutput = [BigNumber, BigNumber] & {
    profileId: BigNumber;
    publishId: BigNumber;
  };
}

export interface ILikeNFTInterface extends utils.Interface {
  functions: {
    "getContractBalance()": FunctionFragment;
    "getLikeSupportFee()": FunctionFragment;
    "getOwnerAddress()": FunctionFragment;
    "getPlatformFee()": FunctionFragment;
    "like((uint256,uint256))": FunctionFragment;
    "setLikeSupportFee(uint256)": FunctionFragment;
    "setOwnerAddress(address)": FunctionFragment;
    "setPlatformFee(uint256)": FunctionFragment;
    "setProfileContract(address)": FunctionFragment;
    "setPublishContract(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getContractBalance"
      | "getLikeSupportFee"
      | "getOwnerAddress"
      | "getPlatformFee"
      | "like"
      | "setLikeSupportFee"
      | "setOwnerAddress"
      | "setPlatformFee"
      | "setProfileContract"
      | "setPublishContract"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLikeSupportFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "like",
    values: [DataTypes.CreateLikeDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setLikeSupportFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnerAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfileContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublishContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLikeSupportFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "like", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLikeSupportFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwnerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfileContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublishContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface ILikeNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILikeNFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getContractBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLikeSupportFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOwnerAddress(overrides?: CallOverrides): Promise<[string]>;

    getPlatformFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    like(
      createLikeData: DataTypes.CreateLikeDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLikeSupportFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwnerAddress(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlatformFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProfileContract(
      profileContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPublishContract(
      publishContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getLikeSupportFee(overrides?: CallOverrides): Promise<BigNumber>;

  getOwnerAddress(overrides?: CallOverrides): Promise<string>;

  getPlatformFee(overrides?: CallOverrides): Promise<BigNumber>;

  like(
    createLikeData: DataTypes.CreateLikeDataStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLikeSupportFee(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwnerAddress(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlatformFee(
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProfileContract(
    profileContractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPublishContract(
    publishContractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getLikeSupportFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnerAddress(overrides?: CallOverrides): Promise<string>;

    getPlatformFee(overrides?: CallOverrides): Promise<BigNumber>;

    like(
      createLikeData: DataTypes.CreateLikeDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    setLikeSupportFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwnerAddress(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfileContract(
      profileContractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublishContract(
      publishContractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getLikeSupportFee(overrides?: CallOverrides): Promise<BigNumber>;

    getOwnerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getPlatformFee(overrides?: CallOverrides): Promise<BigNumber>;

    like(
      createLikeData: DataTypes.CreateLikeDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLikeSupportFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwnerAddress(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlatformFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProfileContract(
      profileContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPublishContract(
      publishContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getContractBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLikeSupportFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwnerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlatformFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    like(
      createLikeData: DataTypes.CreateLikeDataStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLikeSupportFee(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwnerAddress(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformFee(
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProfileContract(
      profileContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPublishContract(
      publishContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
